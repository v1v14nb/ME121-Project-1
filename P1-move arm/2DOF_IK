import math
import machine
from machine import I2C, Pin
import ssd1306
import servo
import time

# Initialize I2C and OLED display
i2c = I2C(scl=Pin(23), sda=Pin(22))
display = ssd1306.SSD1306_I2C(128, 64, i2c)

# Initialize MG90S servos
servo1 = servo.Servo(1)  # GPIO for servo 1
servo2 = servo.Servo(2)  # GPIO for servo 2

# LED setup
led_pin = Pin(17, Pin.OUT)
led_pin.value(0)  # Turn off the LED initially

# Arm segment lengths in mm
l1 = 80.0 
l2 = 80.0 

def inverse_kinematics(x, y):
    """
    Calculate joint angles based on desired end-effector position (x, y)
    using a 2-link planar manipulator inverse kinematics formula.
    neutral is physically set to 90 deg --> subtracts 90 to get 0 to 180 range
    """
    # Calculate angle2 using the cosine law
    cos_angle2 = (x**2 + y**2 - l1**2 - l2**2) / (2 * l1 * l2)
    if cos_angle2 < -1 or cos_angle2 > 1:
        raise ValueError("Target position is out of reach")

    sin_angle2 = math.sqrt(1 - cos_angle2**2)
    angle2 = math.atan2(sin_angle2, cos_angle2)

    # Calculate angle1
    k1 = l1 + l2 * cos_angle2
    k2 = l2 * sin_angle2
    angle1 = math.atan2(y, x) - math.atan2(k2, k1)

    # Convert from radians to degrees
    angle1 = math.degrees(angle1)
    angle2 = math.degrees(angle2)

    # Shift angles from [-90, 90] to [0, 180] for the new neutral positions
    angle1 -= 90
    angle2 -= 90

    return angle1, angle2

def move_arm_to(x, y):
    """
    Move the robotic arm to the specified (x, y) position using inverse kinematics.
    Updates the OLED display and moves the servos to the calculated angles.
    """
    try:
        
        angle1, angle2 = inverse_kinematics(x, y)

        # Ensure the angles stay within the servo's range (0 to 180 degrees)
        angle1 = max(-90, min(angle1, 90))
        angle2 = max(-90, min(angle2, 90))
        
        led_pin.value(1)  # Turn on the LED to indicate movement

        # Move the servos
        servo1.write(int(angle1))
        servo2.write(int(angle2))

        # Display movement details on OLED
        #display.fill(0)
        #display.text('Moving to:', 0, 0, 1)
        #display.text(f'X: {x}, Y: {y}', 0, 10, 1)
        #display.text(f'Ang1: {int(angle1)}', 0, 20, 1)
        #display.text(f'Ang2: {int(angle2)}', 0, 30, 1)
        #display.show()

        # time.sleep(0.3)  # Allow time for movement
        
        led_pin.value(0)  # Turn on the LED to indicate movement


    except ValueError as e:
        display.fill(0)
        display.text("Out of reach!", 0, 0, 1)
        display.show()
        print("Error:", e)
        

def interpolate_line(start, end, num_points=10):
    """
    Generate evenly spaced points along a straight line between start and end points.
    """
    x1, y1 = start
    x2, y2 = end
    points = []
    for i in range(num_points + 1):  # Include the endpoint
        t = i / num_points
        x = (1 - t) * x1 + t * x2
        y = (1 - t) * y1 + t * y2
        points.append((x, y))
    return points

def draw_path(coordinates, num_points=10):
    """
    Moves the robotic arm smoothly along a given path of (x, y) coordinates.
    Interpolates between points for smoother movement.
    """
    for i in range(len(coordinates) - 1):
        start = coordinates[i]
        end = coordinates[i + 1]
        points = interpolate_line(start, end, num_points)

        for point in points:
            move_arm_to(point[0], point[1])


def move_arm_to_angle(theta1, theta2):
    """
    Move the robotic arm to the specified angles

    """
    
    led_pin.value(1)  # Turn on the LED

    # Shift angles from [-90, 90] to [0, 180] for the new neutral positions
    angle1 -= 90
    angle2 -= 90
    
    # Move the servos
    servo1.write(int(theta1))
    servo2.write(int(theta2))
    
    # time.sleep(0.3)  # Allow time for movement

letter_M = [(-100, 18), (-100, 108), (-55, 63), (-10, 108), (-10, 18)]

duck = [(-102.2, 63.6), (-97, 69.5), (-92.5, 82.1), (-94.7, 84.6), (-102, 86), (-116.8, 86), (-103.5, 93.2), (-99.9, 99), (-91.6, 102.7), (-83, 99), (-77.6, 89.8), (-83, 72.9), (-78, 68.6), (-63, 75.6), (-48.8, 75.6), (0, 57.4), (-8.4, 55.3), (-18, 48.4), (-46.2, 41.4), (-70, 40.3), (-89.8, 42.8), (-102.2, 50.4) ]


time.sleep(1)

draw_path(letter_M, num_points=1000)  # Draw the letter M

#draw_path(duck, num_points=1000)  # Draw the letter M

time.sleep(5)


# Draw a rectangle and greeting message on OLED
display.rect(10, 10, 60, 50, 1)
display.text('Good Morning', 0, 50, 1)
display.show()





